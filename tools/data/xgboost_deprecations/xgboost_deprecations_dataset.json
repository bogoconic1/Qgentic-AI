[
  {
    "deprecated_api": "binary",
    "context": "as model serialization format",
    "version": "3.1.0",
    "reason": "Binary serialization format has been formally deprecated in 1.6 and removed in 3.1.",
    "replacement": "ubj (Universal Binary JSON) format",
    "category": "pattern",
    "severity": "error",
    "deprecated_code": "",
    "corrected_code": "",
    "change_description": ""
  },
  {
    "deprecated_api": "use_gpu",
    "context": "as parameter in PySpark interface",
    "version": "3.1.0",
    "reason": "Old GPU-related parameters have been deprecated in 2.0 and removed in 3.1.",
    "replacement": "device",
    "category": "parameter",
    "severity": "error",
    "deprecated_code": "from sparkxgb import XGBoostClassifier\n\nxgb_classifier = XGBoostClassifier(\n    maxDepth=5,\n    n_estimators=100,\n    use_gpu=True  # Deprecated parameter\n)\n\nmodel = xgb_classifier.fit(training_data)",
    "corrected_code": "from sparkxgb import XGBoostClassifier\n\nxgb_classifier = XGBoostClassifier(\n    maxDepth=5,\n    n_estimators=100,\n    device='gpu'  # Use the 'device' parameter instead\n)\n\nmodel = xgb_classifier.fit(training_data)",
    "change_description": "The 'use_gpu' parameter has been removed in favor of the 'device' parameter. Replace 'use_gpu=True' with 'device=\"gpu\"' when initializing XGBoostClassifier in the PySpark interface."
  },
  {
    "deprecated_api": "gpu_id",
    "context": "as parameter in XGBoost estimators",
    "version": "3.1.0",
    "reason": "Old GPU-related parameters have been deprecated in 2.0 and removed in 3.1.",
    "replacement": "device",
    "category": "parameter",
    "severity": "error",
    "deprecated_code": "import xgboost as xgb\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\n\nX, y = load_breast_cancer(return_X_y=True)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nclf = xgb.XGBClassifier(tree_method='gpu_hist', gpu_id=0)\nclf.fit(X_train, y_train)\nprint(clf.score(X_test, y_test))",
    "corrected_code": "import xgboost as xgb\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\n\nX, y = load_breast_cancer(return_X_y=True)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nclf = xgb.XGBClassifier(tree_method='gpu_hist', device='cuda:0')\nclf.fit(X_train, y_train)\nprint(clf.score(X_test, y_test))",
    "change_description": "The deprecated 'gpu_id' parameter in the XGBoost estimator was replaced with the 'device' parameter. Instead of specifying 'gpu_id=0', you now use 'device=\"cuda:0\"' to select the GPU device."
  },
  {
    "deprecated_api": "gpu_hist",
    "context": "as parameter value for tree_method",
    "version": "3.1.0",
    "reason": "Old GPU-related parameters have been deprecated in 2.0 and removed in 3.1.",
    "replacement": "device",
    "category": "parameter",
    "severity": "error",
    "deprecated_code": "import xgboost as xgb\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\n\nX, y = load_breast_cancer(return_X_y=True)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nmodel = xgb.XGBClassifier(tree_method='gpu_hist', n_estimators=100)\nmodel.fit(X_train, y_train)\n",
    "corrected_code": "import xgboost as xgb\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\n\nX, y = load_breast_cancer(return_X_y=True)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nmodel = xgb.XGBClassifier(device='cuda', n_estimators=100)\nmodel.fit(X_train, y_train)\n",
    "change_description": "The 'tree_method' parameter value 'gpu_hist' has been removed in XGBoost 3.1.0. Instead, use the 'device' parameter with value 'cuda' to enable GPU acceleration."
  },
  {
    "deprecated_api": "gpu_coord_descent",
    "context": "as parameter value for updater",
    "version": "3.1.0",
    "reason": "Old GPU-related parameters have been deprecated in 2.0 and removed in 3.1.",
    "replacement": "device",
    "category": "parameter",
    "severity": "error",
    "deprecated_code": "",
    "corrected_code": "",
    "change_description": ""
  },
  {
    "deprecated_api": "XGDMatrixCreateFromCSREx",
    "context": "as C API method",
    "version": "3.1.0",
    "reason": "Deprecated C functions removed.",
    "replacement": "array interface based alternatives",
    "category": "method",
    "severity": "error",
    "deprecated_code": "import numpy as np\nimport ctypes\nimport xgboost as xgb\n\n# Example CSR matrix data\nindptr = np.array([0, 2, 3], dtype=np.uintp)\nindices = np.array([0, 2, 1], dtype=np.uint32)\ndata = np.array([1.0, 2.0, 3.0], dtype=np.float32)\n\nhandle = ctypes.c_void_p()\n# Deprecated C API usage\nxgb.core._LIB.XGDMatrixCreateFromCSREx(\n    indptr.ctypes.data_as(ctypes.POINTER(ctypes.c_size_t)),\n    indices.ctypes.data_as(ctypes.POINTER(ctypes.c_uint32)),\n    data.ctypes.data_as(ctypes.POINTER(ctypes.c_float)),\n    ctypes.c_size_t(len(indptr)),\n    ctypes.c_size_t(len(data)),\n    ctypes.c_uint(3),  # number of columns\n    ctypes.byref(handle)\n)\ndmat = xgb.core.DMatrix(handle=handle)",
    "corrected_code": "import numpy as np\nimport scipy.sparse\nimport xgboost as xgb\n\n# Example CSR matrix data\nindptr = np.array([0, 2, 3], dtype=np.int32)\nindices = np.array([0, 2, 1], dtype=np.int32)\ndata = np.array([1.0, 2.0, 3.0], dtype=np.float32)\ncsr = scipy.sparse.csr_matrix((data, indices, indptr), shape=(2, 3))\n# Use array interface (high-level Python API)\ndmat = xgb.DMatrix(csr)",
    "change_description": "The deprecated code directly calls the C API function 'XGDMatrixCreateFromCSREx' via ctypes to create a DMatrix from CSR data. The corrected code uses the high-level Python API, passing a scipy.sparse.csr_matrix to xgboost.DMatrix, which internally uses the array interface. This is safer, more maintainable, and compatible with current and future XGBoost versions."
  },
  {
    "deprecated_api": "XGDMatrixCreateFromCSCEx",
    "context": "as C API method",
    "version": "3.1.0",
    "reason": "Deprecated C functions removed.",
    "replacement": "array interface based alternatives",
    "category": "method",
    "severity": "error",
    "deprecated_code": "import numpy as np\nimport ctypes\nimport xgboost as xgb\n\n# Suppose we have a CSC matrix\nindptr = np.array([0, 2, 3], dtype=np.uint64)\nindices = np.array([0, 2, 1], dtype=np.uint32)\ndata = np.array([1.0, 2.0, 3.0], dtype=np.float32)\nnum_row = 3\nnum_col = 2\nhandle = ctypes.c_void_p()\n# Deprecated C API usage\nxgb.core._LIB.XGDMatrixCreateFromCSCEx(\n    data.ctypes.data_as(ctypes.POINTER(ctypes.c_float)),\n    indptr.ctypes.data_as(ctypes.POINTER(ctypes.c_uint64)),\n    indices.ctypes.data_as(ctypes.POINTER(ctypes.c_uint32)),\n    ctypes.c_uint64(len(indptr)),\n    ctypes.c_uint64(len(data)),\n    ctypes.c_uint64(num_row),\n    ctypes.byref(handle)\n)\n",
    "corrected_code": "import numpy as np\nimport scipy.sparse\nimport xgboost as xgb\n\n# Create the same CSC matrix using scipy\nindptr = np.array([0, 2, 3], dtype=np.int32)\nindices = np.array([0, 2, 1], dtype=np.int32)\ndata = np.array([1.0, 2.0, 3.0], dtype=np.float32)\ncsc = scipy.sparse.csc_matrix((data, indices, indptr), shape=(3, 2))\n# Use array interface (scipy.sparse matrix) directly\nD = xgb.DMatrix(csc)\n",
    "change_description": "The deprecated code directly calls the C API function 'XGDMatrixCreateFromCSCEx' to create a DMatrix from CSC data. The corrected code uses the high-level Python interface by passing a scipy.sparse.csc_matrix to xgboost.DMatrix, which internally uses the array interface. This is the recommended and supported way after the removal of the deprecated C API."
  },
  {
    "deprecated_api": "DeviceQuantileDMatrix",
    "context": "as class in Python API",
    "version": "3.0.0",
    "reason": "Deprecated class removed.",
    "replacement": "QuantileDMatrix",
    "category": "class",
    "severity": "error",
    "deprecated_code": "",
    "corrected_code": "",
    "change_description": ""
  },
  {
    "deprecated_api": "feval",
    "context": "as parameter in Python package",
    "version": "3.0.0",
    "reason": "Deprecated parameter removed.",
    "replacement": "custom evaluation metric via callbacks or eval_metric",
    "category": "parameter",
    "severity": "error",
    "deprecated_code": "",
    "corrected_code": "",
    "change_description": ""
  },
  {
    "deprecated_api": "dask",
    "context": "as default import in xgboost",
    "version": "3.0.0",
    "reason": "dask is no longer imported by default to avoid unnecessary dependencies.",
    "replacement": "from xgboost import dask",
    "category": "import",
    "severity": "error",
    "deprecated_code": "import xgboost as xgb\n\n# Using dask module from xgboost (deprecated import)\ndask_model = xgb.dask.DaskXGBClassifier()\n\n# ... rest of the Dask training code\n",
    "corrected_code": "import xgboost as xgb\nfrom xgboost import dask\n\n# Using dask module from xgboost (correct import)\ndask_model = dask.DaskXGBClassifier()\n\n# ... rest of the Dask training code\n",
    "change_description": "Previously, the dask module could be accessed as an attribute of the main xgboost import (xgb.dask). Starting from version 3.0.0, dask is no longer imported by default to avoid unnecessary dependencies. You must now explicitly import dask from xgboost using 'from xgboost import dask'."
  },
  {
    "deprecated_api": "datatable",
    "context": "as supported data type in Python package",
    "version": "3.0.0",
    "reason": "Support for datatable dropped.",
    "replacement": "pandas, numpy, or other supported data types",
    "category": "pattern",
    "severity": "error",
    "deprecated_code": "",
    "corrected_code": "",
    "change_description": ""
  },
  {
    "deprecated_api": "early_stopping_rounds",
    "context": "as parameter in fit() method of sklearn interface",
    "version": "2.1.0",
    "reason": "Removed from fit method; use in constructor instead.",
    "replacement": "early_stopping_rounds in constructor",
    "category": "parameter",
    "severity": "error",
    "deprecated_code": "from xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\n\nX, y = ...  # your features and labels\ndtrain, dval, ytrain, yval = train_test_split(X, y, test_size=0.2, random_state=42)\n\nmodel = XGBClassifier()\nmodel.fit(dtrain, ytrain, eval_set=[(dval, yval)], early_stopping_rounds=10, verbose=True)",
    "corrected_code": "from xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\n\nX, y = ...  # your features and labels\ndtrain, dval, ytrain, yval = train_test_split(X, y, test_size=0.2, random_state=42)\n\nmodel = XGBClassifier(early_stopping_rounds=10)\nmodel.fit(dtrain, ytrain, eval_set=[(dval, yval)], verbose=True)",
    "change_description": "The early_stopping_rounds parameter has been removed from the fit() method in the sklearn interface of XGBoost as of version 2.1.0. Instead, you should specify early_stopping_rounds in the XGBClassifier (or XGBRegressor) constructor."
  },
  {
    "deprecated_api": "eval_metric",
    "context": "as parameter in fit() method of sklearn interface",
    "version": "2.1.0",
    "reason": "Removed from fit method; use in constructor instead.",
    "replacement": "eval_metric in constructor",
    "category": "parameter",
    "severity": "error",
    "deprecated_code": "from xgboost import XGBClassifier\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\n\nX, y = load_iris(return_X_y=True)\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)\n\nmodel = XGBClassifier()\nmodel.fit(X_train, y_train, eval_metric='mlogloss')\n",
    "corrected_code": "from xgboost import XGBClassifier\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\n\nX, y = load_iris(return_X_y=True)\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)\n\nmodel = XGBClassifier(eval_metric='mlogloss')\nmodel.fit(X_train, y_train)\n",
    "change_description": "The 'eval_metric' parameter should no longer be passed to the fit() method of the sklearn XGBoost interface. Instead, specify 'eval_metric' in the XGBClassifier (or XGBRegressor) constructor."
  },
  {
    "deprecated_api": "callbacks",
    "context": "as parameter in fit() method of sklearn interface",
    "version": "2.1.0",
    "reason": "Removed from fit method; use in constructor instead.",
    "replacement": "callbacks in constructor",
    "category": "parameter",
    "severity": "error",
    "deprecated_code": "from xgboost import XGBClassifier, callback\nfrom sklearn.datasets import load_iris\n\nX, y = load_iris(return_X_y=True)\nmodel = XGBClassifier()\nmodel.fit(\n    X, y,\n    callbacks=[callback.EarlyStopping(rounds=5)]\n)",
    "corrected_code": "from xgboost import XGBClassifier, callback\nfrom sklearn.datasets import load_iris\n\nX, y = load_iris(return_X_y=True)\nmodel = XGBClassifier(\n    callbacks=[callback.EarlyStopping(rounds=5)]\n)\nmodel.fit(X, y)",
    "change_description": "The 'callbacks' parameter was removed from the fit() method in the sklearn interface of XGBoost as of version 2.1.0. Instead, pass 'callbacks' to the XGBClassifier (or XGBRegressor) constructor."
  },
  {
    "deprecated_api": "XGBoosterGetModelRaw",
    "context": "as C API method",
    "version": "2.1.0",
    "reason": "Removed after deprecation in 1.6.",
    "replacement": "XGBoosterSaveModel",
    "category": "method",
    "severity": "error",
    "deprecated_code": "",
    "corrected_code": "",
    "change_description": ""
  },
  {
    "deprecated_api": "XGDMatrixSetDenseInfo",
    "context": "as C API method",
    "version": "2.1.0",
    "reason": "Deprecated; use array interface based alternatives.",
    "replacement": "array interface based alternatives",
    "category": "method",
    "severity": "warning",
    "deprecated_code": "import xgboost as xgb\nimport numpy as np\n\n# Create a DMatrix from a numpy array\nX = np.random.rand(5, 10).astype(np.float32)\ndmat = xgb.DMatrix(X)\n\n# Set label using deprecated C API method\nlabels = np.array([0, 1, 0, 1, 0], dtype=np.float32)\nxgb.core._LIB.XGDMatrixSetDenseInfo(\n    dmat.handle, b'label', labels.ctypes.data_as(xgb.ctypes.c_void_p), len(labels), 0\n)",
    "corrected_code": "import xgboost as xgb\nimport numpy as np\n\n# Create a DMatrix from a numpy array\nX = np.random.rand(5, 10).astype(np.float32)\nlabels = np.array([0, 1, 0, 1, 0], dtype=np.float32)\ndmat = xgb.DMatrix(X, label=labels)\n# Alternatively, set label after creation:\n# dmat.set_label(labels)",
    "change_description": "The deprecated code uses the low-level C API method 'XGDMatrixSetDenseInfo' to set the label information for a DMatrix. The corrected code uses the high-level Python API by passing the label directly to the DMatrix constructor or by using the 'set_label' method, which is the recommended and safer approach."
  },
  {
    "deprecated_api": "XGDMatrixSetUIntInfo",
    "context": "as C API method",
    "version": "2.1.0",
    "reason": "Deprecated; use array interface based alternatives.",
    "replacement": "array interface based alternatives",
    "category": "method",
    "severity": "warning",
    "deprecated_code": "import xgboost as xgb\nimport numpy as np\n\n# Create some dummy data\nX = np.random.rand(5, 3)\ny = np.array([0, 1, 0, 1, 0])\n\n# Create DMatrix\ndmat = xgb.DMatrix(X, label=y)\n\n# Set group info using deprecated C API\nhandle = dmat.handle\ngroup_ptr = (ctypes.c_uint * 2)(2, 3)  # Two groups: first 2, next 3\nxgb.core._LIB.XGDMatrixSetUIntInfo(handle, b'group_ptr', group_ptr, 2)\n",
    "corrected_code": "import xgboost as xgb\nimport numpy as np\n\n# Create some dummy data\nX = np.random.rand(5, 3)\ny = np.array([0, 1, 0, 1, 0])\ngroup_ptr = np.array([2, 3], dtype=np.uint32)  # Two groups: first 2, next 3\n\n# Create DMatrix with group info using array interface\n# XGBoost expects 'group' as the number of rows in each group\n# So, pass [2, 3] as the group parameter\n\ndmat = xgb.DMatrix(X, label=y)\ndmat.set_group(group_ptr)\n",
    "change_description": "The deprecated code directly calls the C API method 'XGDMatrixSetUIntInfo' to set group information on a DMatrix. The corrected code uses the high-level Python method 'set_group', which accepts a NumPy array and uses the array interface, as recommended. This avoids direct use of the C API and is compatible with XGBoost 2.1.0 and later."
  }
]